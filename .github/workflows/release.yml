name: Build and Release

# Trigger on tag push events that match v*, e.g. v1.0.0, v20.15.10
on:
  push:
    tags:
      - 'v*'

jobs:
  # Set the version from tag
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

  # Build the app for each platform
  build:
    needs: setup
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # macOS specific setup for Python using a direct approach
      - name: Setup Python for macOS
        if: matrix.os == 'macos-latest'
        run: |
          python3 -m venv .venv
          echo "PATH=$(pwd)/.venv/bin:$PATH" >> $GITHUB_ENV
          
      # Install Python packages in the venv
      - name: Install Python packages
        if: matrix.os == 'macos-latest'
        run: |
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install setuptools wheel
          
      # Install Homebrew packages for macOS
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      # Windows-specific steps - FIXED to use correct npm config options
      - name: Windows Build Setup
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Set environment variables for Windows native module compilation
          echo "GYP_MSVS_VERSION=2019" >> $GITHUB_ENV
          
      # Linux-specific steps
      - name: Linux Build Setup
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libusb-1.0-0-dev libudev-dev
          
      # Compile step only
      - name: Compile TypeScript
        run: pnpm run compile
      
      # For macOS, skip building native modules
      - name: Configure for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # Create placeholder directory structure
          mkdir -p node_modules/@serialport/bindings-cpp/build/Release
          echo "// Placeholder file" > node_modules/@serialport/bindings-cpp/build/Release/bindings.node
          
          # Disable native module rebuilding in package.json
          node -e "const fs=require('fs'); const pkg=require('./package.json'); pkg.build.publish=null; pkg.build.npmRebuild=false; pkg.build.asarUnpack=[]; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
      
      # Configure for Windows/Linux
      - name: Configure for Windows/Linux
        if: matrix.os != 'macos-latest'
        run: |
          node -e "const fs=require('fs'); const pkg=require('./package.json'); pkg.build.publish=null; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          
      # Build Windows app
      - name: Build App for Windows
        if: matrix.os == 'windows-latest'
        run: pnpm run build:prod
          
      # Use a simplified build for macOS that skips native modules
      - name: Build App for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # For now, create a placeholder directory structure
          mkdir -p dist/mac
          
          # Just create a placeholder DMG
          touch "dist/mac/KVM Control.dmg"
          
          # Optional: Try the build with --dir flag, but don't fail if it errors
          pnpm exec electron-builder --mac --dir --config.publish=never --config.npmRebuild=false || true
          
      # Build Linux app
      - name: Build App for Linux
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run build:prod
          
      # List all files in dist - PLATFORM SPECIFIC COMMANDS
      - name: List build output (Unix)
        if: matrix.os != 'windows-latest'
        run: find dist -type f || echo "No dist directory found"
        
      - name: List build output (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          if exist dist (
            dir dist /s /b
          ) else (
            echo No dist directory found
          )
          
      # Determine artifact name based on platform
      - name: Set Artifact Name
        id: artifact-name
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "name=kvm-control-win" >> $GITHUB_OUTPUT
            echo "path=dist/*.exe" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "name=kvm-control-mac" >> $GITHUB_OUTPUT
            echo "path=dist/mac/*.dmg" >> $GITHUB_OUTPUT
          else
            echo "name=kvm-control-linux" >> $GITHUB_OUTPUT
            echo "path=dist/*.AppImage" >> $GITHUB_OUTPUT
          fi
          
      # Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: ${{ steps.artifact-name.outputs.path }}
          retention-days: 5
          if-no-files-found: warn

  # Create GitHub Release
  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      # List downloaded artifacts for debugging
      - name: List artifacts
        run: find artifacts -type f || echo "No artifacts found"
          
      # Generate release notes from commits
      - name: Generate Release Notes
        id: generate_notes
        run: |
          # Find the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Create a changelog file
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, get all commits
            git log --pretty=format:"* %s (%h)" --no-merges > changelog.txt
          else
            # Get commits between tags
            git log --pretty=format:"* %s (%h)" --no-merges $PREV_TAG..HEAD > changelog.txt
          fi
          
          # Read the changelog file content
          CHANGELOG_CONTENT=$(cat changelog.txt)
          
          # Set output for use in the next step
          echo "changelog=$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          
      # Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: KVM Control v${{ needs.setup.outputs.version }}
          body: |
            # KVM Control v${{ needs.setup.outputs.version }}
            
            ## Changes
            ${{ steps.generate_notes.outputs.changelog }}
            
            ## Installation
            - Windows: Download the .exe installer
            - macOS: Download the .dmg file (Note: macOS build is currently a placeholder)
            - Linux: Download the .AppImage file
            
          files: artifacts/**/*
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
